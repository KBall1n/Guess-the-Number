<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Number Guessing Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        #name-popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        #name-popup-content {
            background-color: white;
            padding: 24px;
            border-radius: 8px;
            width: 300px;
            text-align: center;
        }

        #leaderboard-container {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 16px;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 8px;
        }

        #leaderboardList li {
             padding: 8px;
            border-bottom: 1px solid #f3f4f6;
        }

        #leaderboardList li:last-child {
            border-bottom: none;
        }

        .popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            justify-content: center;
            align-items: center;
            z-index: 11;
            perspective: 500px; /* Needed for 3D transforms */
            overflow: hidden; /* Added to contain the bouncing image */
        }

        .popup-content {
            background-color: white;
            padding: 24px;
            border-radius: 8px;
            width: 300px;
            text-align: center;
            position: relative; /* Allows for absolute positioning of images */
            transform-style: preserve-3d;
        }

        .popup-image {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5); /* Start small and centered */
            max-width: 150px; /* Limit the size */
            transition:  opacity 0.5s ease; /* Smooth transition */
            opacity: 0;
            z-index: -1; /* Behind the text */
        }

        .popup-image.show {
            opacity: 1;
        }

        @keyframes jiggle {
            0%, 100% { transform: rotate(0deg); }
            25% { transform: rotate(-5deg); }
            75% { transform: rotate(5deg); }
        }

        .jiggle {
            animation: jiggle 0.3s ease-in-out;
        }

        @keyframes bounceAround {
            0%, 100% {
                transform: translate(0, 0);
            }
            25% {
                transform: translate(calc(100% - 150px), 0);
            }
            50% {
                transform: translate(calc(100% - 150px), calc(100% - 150px));
            }
            75% {
                transform: translate(0, calc(100% - 150px));
            }
        }

        .bounceAround {
            animation: bounceAround 3s ease-in-out infinite;
        }

    </style>
</head>
<body class="bg-gradient-to-r from-purple-400 to-blue-500 h-screen flex justify-center items-center">
    <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md transition-transform hover:scale-105">
        <h1 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Guess the Number</h1>
        <p class="text-gray-600 mb-4 text-center">Enter your guess between 1 and 10:</p>

        <div id="input-container" class="mb-4">
            <input type="number" id="guessInput" placeholder="Your Guess" class="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-blue-500 focus:ring-blue-500 text-center" disabled>
            <p id="input-error" class="text-red-500 text-sm mt-2 text-center" style="display: none;"></p>
        </div>

        <div id="feedback" class="mb-4 p-4 rounded-md text-center font-medium" style="display: none;"></div>

        <button id="checkGuess" class="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-md w-full focus:outline-none focus:shadow-outline transition duration-300 ease-in-out" disabled>Check Guess</button>

        <div id="personal-guesses" class="mb-4 text-center">
            <p class="text-gray-700">Your Correct Guesses: <span id="personal-guess-count" class="font-semibold text-blue-600">0</span></p>
        </div>

        <div id="leaderboard" class="mt-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-3 text-center">Global Leaderboard</h2>
            <div id="leaderboard-container">
                <ul id="leaderboardList" class="space-y-2">
                    </ul>
            </div>
            <p id="leaderboard-message" class="text-gray-500 text-sm mt-2 text-center">No correct guesses yet.</p>
            <p id="refresh-countdown" class="text-gray-500 text-sm mt-2 text-center">Refreshing in <span id="countdown-timer">00:00</span></p>
        </div>
    </div>

    <div id="name-popup">
        <div id="name-popup-content">
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Welcome!</h2>
            <p class="text-gray-600 mb-4">Please enter your name. You cannot change it later!</p>
            <input type="text" id="nameInput" placeholder="Enter your name" class="w-full px-4 py-2 rounded-md border border-gray-300 focus:border-blue-500 focus:ring-blue-500 text-center mb-4">
            <p id="name-error" class="text-red-500 text-sm mt-2 text-center" style="display: none;"></p>
            <button id="nameSubmit" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:shadow-outline transition duration-300 ease-in-out">Start Game</button>
        </div>
    </div>

    <div id="correct-popup" class="popup">
        <div class="popup-content">
            <h2 class="text-2xl font-semibold text-green-600 mb-4">Correct Guess!</h2>
            <p class="text-gray-700 mb-4">Great job! Keep guessing to get on the leaderboard.</p>
            <img src="https://media.giphy.com/media/l0IyivKShukrA5k6Q/giphy.gif" alt="Congratulations" class="popup-image show jiggle">
        </div>
    </div>

    <div id="wrong-popup" class="popup">
        <div class="popup-content">
            <h2 class="text-2xl font-semibold text-red-600 mb-4">Wrong Guess!</h2>
            <p class="text-gray-700 mb-4">Try again!</p>
        </div>
    </div>

    <script>
        let secretNumber = Math.floor(Math.random() * 10) + 1;
        let guessInput = document.getElementById("guessInput");
        let checkGuessButton = document.getElementById("checkGuess");
        let feedback = document.getElementById("feedback");
        let leaderboardList = document.getElementById("leaderboardList");
        let leaderboard = document.getElementById("leaderboard");
        let leaderboardMessage = document.getElementById("leaderboard-message");
        let correctGuesses = [];
        let playerName = "";
        const namePopup = document.getElementById("name-popup");
        const nameInput = document.getElementById("nameInput");
        const nameSubmitButton = document.getElementById("nameSubmit");
        const nameError = document.getElementById("name-error");
        let personalGuessCount = 0;
        const personalGuessCountDisplay = document.getElementById("personal-guess-count");
        const refreshCountdownDisplay = document.getElementById("countdown-timer");
        let refreshIntervalId;
        let timeRemaining = 1800;
        const correctPopup = document.getElementById("correct-popup");
        const wrongPopup = document.getElementById("wrong-popup");


        // Function to update the leaderboard display
        function updateLeaderboard() {
            if (correctGuesses.length === 0) {
                leaderboardMessage.style.display = "block";
                leaderboardList.innerHTML = '';
                leaderboard.style.display = 'none';
            } else {
                leaderboardMessage.style.display = "none";
                leaderboard.style.display = 'block';
                // Calculate correct guess counts for each player
                const playerCounts = {};
                correctGuesses.forEach(guess => {
                    playerCounts[guess.playerName] = (playerCounts[guess.playerName] || 0) + 1;
                });

                // Sort players by correct guess count (descending order)
                const sortedPlayers = Object.entries(playerCounts).sort(([, countA], [, countB]) => countB - countA);

                leaderboardList.innerHTML = '';
                sortedPlayers.forEach(([playerName, count]) => {
                    let li = document.createElement("li");
                    li.textContent = `Player: ${playerName}, Correct Guesses: ${count}`;
                    li.className = "bg-gradient-to-r from-green-100 to-blue-100 rounded-md shadow-sm py-2 px-3 text-gray-700";
                    leaderboardList.appendChild(li);
                });
            }
        }

        // Function to save leaderboard data (simulated)
        function saveLeaderboardData() {
            // In a real application, you would send this data to a server
            console.log("Saving leaderboard data:", correctGuesses);
            //  localStorage.setItem('leaderboardData', JSON.stringify(correctGuesses));
        }

        // Function to load leaderboard data (simulated)
        function loadLeaderboardData() {
            // In a real application, you would fetch this data from a server
            const savedData = []; // localStorage.getItem('leaderboardData');
            if (savedData) {
                correctGuesses = JSON.parse(savedData);
            }
        }

        // Function to start the refresh countdown
        function startRefreshCountdown() {
            timeRemaining = 1800; // Reset to 30 minutes
            clearInterval(refreshIntervalId); // Clear any existing interval
            refreshIntervalId = setInterval(() => {
                timeRemaining--;
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = timeRemaining % 60;
                const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                refreshCountdownDisplay.textContent = formattedTime;

                if (timeRemaining <= 0) {
                    clearInterval(refreshIntervalId);
                    // Fetch new data and update leaderboard
                    loadLeaderboardData();
                    updateLeaderboard();
                    startRefreshCountdown(); // Restart the countdown
                    console.log("Refreshing leaderboard data...");
                }
            }, 1000);
        }

        function showPopup(popup) {
            popup.style.display = "flex";
            // Find the image within the popup and add the 'show' class
            const popupImage = popup.querySelector('.popup-image');
            if (popupImage) {
                popupImage.classList.add('show');
                // Add a class for animation
                if (popup === correctPopup) {
                    popupImage.classList.add('jiggle');
                }

            }
            setTimeout(() => {
                popup.style.display = "none";
                if (popupImage) {
                    popupImage.classList.remove('show'); // remove show class
                    popupImage.classList.remove('jiggle');
                }
            }, 3000);
        }

        checkGuessButton.addEventListener("click", function () {
            let guess = parseInt(guessInput.value);
            let inputError = document.getElementById("input-error");

            if (isNaN(guess) || guess < 1 || guess > 10) {
                inputError.textContent = "Please enter a valid number between 1 and 10.";
                inputError.style.display = "block";
                feedback.style.display = "none";
                return;
            }

            inputError.style.display = "none";

            setTimeout(() => {
                if (guess === secretNumber) {
                    showPopup(correctPopup);
                    correctGuesses.push({ playerName: playerName, number: guess });
                    personalGuessCount++;
                    personalGuessCountDisplay.textContent = personalGuessCount;
                    updateLeaderboard();
                    saveLeaderboardData();
                    secretNumber = Math.floor(Math.random() * 10) + 1;
                    guessInput.value = "";
                } else {
                    showPopup(wrongPopup);
                    guessInput.value = "";
                }
            }, 1000);
        });

        nameSubmitButton.addEventListener("click", function () {
            playerName = nameInput.value.trim();
            if (playerName === "") {
                nameError.textContent = "Please enter your name.";
                nameError.style.display = "block";
                return;
            }
            nameError.style.display = "none";
            namePopup.style.display = "none";
            guessInput.disabled = false;
            checkGuessButton.disabled = false;
            loadLeaderboardData();
            updateLeaderboard();
            startRefreshCountdown();
        });

        namePopup.style.display = "flex";
    </script>
</body>
</html>
